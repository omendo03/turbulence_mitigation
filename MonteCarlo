% Define parameters
N = 100; % Size of the grid
L = 1; % Size of the domain
dx = L/N; % Grid spacing
x = linspace(-L/2, L/2, N); % Spatial grid
lambda = 0.5e-6; % Wavelength of the optical signal (in meters)
k = 2*pi/lambda; % Wavenumber

% Define Kolmogorov turbulence parameters
sigma = 1; % Variance of phase distortion
lambda0 = 0.1; % Outer scale of turbulence
k0 = 2*pi/lambda0; % Outer scale wavenumber

% Define number of Monte Carlo realizations
num_realizations = 10;

% Preallocate arrays to store results
Arx_all = zeros(N, N, num_realizations);
phi_all = zeros(N, N, num_realizations);

% Perform Monte Carlo simulations
for i = 1:num_realizations
    % Generate random phases for phase distortion
    sigma = exprnd(1); % Sample turbulence parameter (2Ïƒ^2) from an exponential distribution
    phi = sqrt(sigma) * randn(N, N);
    
    % Fourier transform of phase distortion
    Phi = fftshift(fft2(phi));

    % Frequency grid
    kx = 2*pi*(-N/2:N/2-1)/L;
    [kx, ky] = meshgrid(kx);

    % Kolmogorov power spectrum
    P_k = 0.033 * (k0^(-11/3)) * (kx.^2 + ky.^2 + (2*pi/lambda0)^2).^(-11/6);

    % Apply power spectrum
    Phi = sqrt(P_k) .* Phi;

    % Inverse Fourier transform
    phi = ifft2(ifftshift(Phi));
    
    % Store phase distortion
    phi_all(:,:,i) = phi;

    % Define transmitted optical signal amplitude
    Atx = ones(N, N); % Assuming unity amplitude for simplicity

    % Phase distortion matrix
    phase_distortion = exp(1i * phi);

    % Received optical signal considering phase distortion
    Arx_all(:,:,i) = Atx .* phase_distortion;
end

% Display phase distortion for one realization
figure;
surf(x, x, real(phi_all(:,:,1)), 'EdgeColor', 'none');
xlabel('x');
ylabel('y');
zlabel('Real part of Phase distortion');
title('Real part of Phase distortion');

% Display received optical signal for one realization
figure;
surf(x, x, abs(Arx_all(:,:,1)), 'EdgeColor', 'none');
xlabel('x');
ylabel('y');
zlabel('Imaginary part of Phase distorsion');
title('Imaginary part of Phase distorsion');

% Display phase distortion for all realizations
figure;
for i = 1:num_realizations
    subplot(3, 5, i);
    surf(x, x, real(phi_all(:,:,i)), 'EdgeColor', 'none');
    xlabel('x');
    ylabel('y');
 
    title('Real part of Phase distortion');
end

% Display received optical signal for all realizations
figure;
for i = 1:num_realizations
    subplot(3, 5, i);
    surf(x, x, abs(Arx_all(:,:,i)), 'EdgeColor', 'none');
    xlabel('x');
    ylabel('y');

    title('Imaginary part of Phase distorsion');
end
